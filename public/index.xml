<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>The Home Page on Christopher Smith</title>
    <link>//localhost:1313/</link>
    <description>Recent content in The Home Page on Christopher Smith</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jun 2025 12:32:21 -0600</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Howdy World!</title>
      <link>//localhost:1313/blog/howdyworld/</link>
      <pubDate>Wed, 11 Jun 2025 12:32:21 -0600</pubDate>
      <guid>//localhost:1313/blog/howdyworld/</guid>
      <description>&lt;p&gt;The first edition of &amp;ldquo;The C Programming Language&amp;rdquo; was published in 1978. Developed by Dr. Dennis Ritche, Dr. Ken Thomson, and writing support from Dr. Brian Kernigan completely changed the way we program forever. C was a revelation, a shift from the paradigm that each mainframe and computer had to be run on unique, separate operating system. Through C, Unix became the primary OS of academia and thus would be the foundation for Apple, Windows, Java, Python, C++, Go, and so many more tools we use today.&lt;/p&gt;</description>
    </item>
    <item>
      <title>01 An Introduction to Go</title>
      <link>//localhost:1313/series/a-guide-to-go-programming/01-an-introduction-to-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/series/a-guide-to-go-programming/01-an-introduction-to-go/</guid>
      <description>&lt;h2 id=&#34;why-go&#34;&gt;Why Go&lt;/h2&gt;
&lt;p&gt;In a world overflowing with programming languages, Go (or Golang) stands out not just for what it does,but for why it was created in the first place. Born at Google in the late 2000s, Go was forged in the fires of frustration. Its creators,Robert Griesemer, Rob Pike, and Ken Thompson, were all veterans of systems programming and distributed systems, and they were growing weary of the complex build times, clunky dependency management, and lack of scalability in existing languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>01 What Does Linear Mean</title>
      <link>//localhost:1313/series/linear-algebra-for-non-math-people/01-what-does-linear-mean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/series/linear-algebra-for-non-math-people/01-what-does-linear-mean/</guid>
      <description>&lt;p&gt;In the 1930&amp;rsquo;s, two indepentent mathematicians, Leonid Kantorovich and Wassily Leontief were busy producing something that would be overlooked for decades: The true and practical application of linear equations in an increasingly modern, increasingly mechanical world. While their groundbreaking work was overlooked by peers like Alan Turing and John Von Neumann, both of whom would have profound impact on the world of mathematics and computer science, Kantorovich and Leontief&amp;rsquo;s work would nontheless be just as important in our modern age as Turing&amp;rsquo;s and von Neumann&amp;rsquo;s.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 Hello World</title>
      <link>//localhost:1313/series/a-guide-to-go-programming/02-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/series/a-guide-to-go-programming/02-hello-world/</guid>
      <description>&lt;p&gt;When Go was initially designed, it was built with the intent of being a &amp;ldquo;Modern C&amp;rdquo; or a reimagining of what C would be like, had it been invented in the Year of our Lord Alan Turing, 2015.&lt;/p&gt;
&lt;p&gt;Go is a compiled, strongly typed, multi-paradigmed, garbage-collected language that focuses on simplicity and speed rather than a vast type system, or single-paradigm behavior.&lt;/p&gt;
&lt;p&gt;It has recieved critical acclaim as well as criticism from throughout the community but its nature has lent itself well to becoming a solid choice for backend, service-centered architecture, while remaining fast and memory-safe.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
