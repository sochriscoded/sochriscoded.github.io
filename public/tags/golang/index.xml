<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on Christopher Smith</title>
    <link>//localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on Christopher Smith</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <atom:link href="//localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01 An Introduction to Go</title>
      <link>//localhost:1313/series/a-guide-to-go-programming/01-an-introduction-to-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/series/a-guide-to-go-programming/01-an-introduction-to-go/</guid>
      <description>&lt;h2 id=&#34;why-go&#34;&gt;Why Go&lt;/h2&gt;
&lt;p&gt;In a world overflowing with programming languages, Go (or Golang) stands out not just for what it does,but for why it was created in the first place. Born at Google in the late 2000s, Go was forged in the fires of frustration. Its creators,Robert Griesemer, Rob Pike, and Ken Thompson, were all veterans of systems programming and distributed systems, and they were growing weary of the complex build times, clunky dependency management, and lack of scalability in existing languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 Hello World</title>
      <link>//localhost:1313/series/a-guide-to-go-programming/02-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/series/a-guide-to-go-programming/02-hello-world/</guid>
      <description>&lt;p&gt;When Go was initially designed, it was built with the intent of being a &amp;ldquo;Modern C&amp;rdquo; or a reimagining of what C would be like, had it been invented in the Year of our Lord Alan Turing, 2015.&lt;/p&gt;
&lt;p&gt;Go is a compiled, strongly typed, multi-paradigmed, garbage-collected language that focuses on simplicity and speed rather than a vast type system, or single-paradigm behavior.&lt;/p&gt;
&lt;p&gt;It has recieved critical acclaim as well as criticism from throughout the community but its nature has lent itself well to becoming a solid choice for backend, service-centered architecture, while remaining fast and memory-safe.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
